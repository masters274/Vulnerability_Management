Function Export-NessusScanAll {
	<#
			.SYNOPSIS
			When you need to download all the scan reports (history) for a scan. Helpful when you need to run the
			Nessus_Vuln_Mgmt report tool against all history for a scan, to get historical reporting and stats.

			.DESCRIPTION
			Downloads all scan history for a particular scan.

			.AUTHOR
			https://github.com/masters274/Vulnerability_Management/

			.PARAMETER Server
			Name of your nessus server. IP address works too. 

			.PARAMETER FolderName
			Name of the virtual folder in the Nessus interface.

			.PARAMETER ScanName
			Name of the scan in Nessus

			.PARAMETER Format
			Download format for each report. Nessus (XML), CSV, and HTML are available. 

			.PARAMETER Credential
			Credentials for a Nessus web UI user that has access to the reports/scans. 

			.EXAMPLE
			Export-NessusScansAll -Server scanner.domain.com -FolderName Monthly 
			-ScanName Basic_Network_Internal_Nets -Format Nessus -Credential $MyCreds
		
			This downloads all the scan reports to the current directory for the "Basic_Network_Internal_Nets" 
			scan, located in the "Monthly" folder.

			.NOTES
			This script requires Posh-Nessus module https://github.com/tenable/Posh-Nessus
	#>


	Param (
		[Parameter(Mandatory=$true,
		 HelpMessage='Provide Nessus server name or IP')]
		[Alias('S')]
		[String]$Server,
		
		[Parameter(Mandatory=$true,
		 HelpMessage='Nessus UI folder name')]
		[Alias('FN')]
		[String]$FolderName,
		
		[Parameter(Mandatory=$true,
		 HelpMessage='Nessus UI scan name')]
		[Alias('SN')]
		[String]$ScanName,
		
		[Parameter(Mandatory=$true,
		 HelpMessage='Export format type')]
		[ValidateSet('Nessus','CSV','HTML')]
		[Alias('F')]
		[String]$Format,
		
		[Parameter(Mandatory=$true,
		 HelpMessage='PS Credential object for string credentials')]
		[System.Management.Automation.Credential()]
		[Alias('Cred','C')]
		[PSCredential]$Credential
	)

	$boolShouldContinue = $true
	
	# List all modules that are needed for this function to be successful. 
	$arrayRequiredModules = ('Posh-Nessus')
	
	Try { # Requirement checking...
		foreach ($module in $arrayRequiredModules) {
			if (!(Get-Module -Name $module)) {
				
				Import-Module -Name $module
			}
		}
	}
	Catch {
		Write-Error -Message 'Missing one or more requirements. Exiting.'
		$boolShouldContinue = $false
	}

	if ($boolShouldContinue) { # Really shouldn't ever make it here
	
		$session = New-NessusSession -ComputerName $Server -Credentials $Credential
		
		$folder = Get-NessusFolder -SessionId $session.SessionId | 
			Where-Object {$_.Name -eq ('{0}' -f $FolderName)}
			
		$scan = Get-NessusScan -SessionId $session.SessionId -FolderId $folder.FolderId -Status Completed |
			Where-Object {$_.Name -eq ('{0}' -f $ScanName)}
		
		
		$scan | Show-NessusScanHistory | 
		
				<#$FileDate = Get-Date -Date ($_.CreationDate) -UFormat '%Y%m%d'
			
				$strFileName = ('{0}\{1}_{2}.nessus' -f $pwd.Path,$FileDate,$ScanName)
#>			
		
				Export-NessusScan -Format Nessus  -SessionId $session.SessionId `
				-ScanId $scan.ScanId 
		

	 
		Remove-NessusSession -SessionId $session.SessionId
	}
}

